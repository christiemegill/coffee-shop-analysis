# visualization_utils.py

import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
from typing import Dict, List, Optional
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CoffeeShopVisualizer:
    def __init__(self, data_path: str):
        """Initialize the visualizer with data path.
        
        Args:
            data_path (str): Path to the CSV file containing transaction data
        """
        self.data_path = data_path
        self.df = None
        self._load_data()

    def _load_data(self) -> None:
        """Load and prepare the transaction data."""
        try:
            self.df = pd.read_csv(self.data_path)
            # Convert date columns
            date_columns = ['transaction_date']
            for col in date_columns:
                self.df[col] = pd.to_datetime(self.df[col])
            logger.info("Data loaded successfully")
        except Exception as e:
            logger.error(f"Error loading data: {str(e)}")
            raise

    def create_sales_dashboard(self) -> go.Figure:
        """Create the main sales performance dashboard.
        
        Returns:
            go.Figure: Plotly figure object containing the dashboard
        """
        try:
            # Create metrics dataframe
            metrics_df = self.df.groupby(['product_detail', 'product_category']).agg({
                'transaction_id': 'count',
                'transaction_qty': 'sum',
                'unit_price': 'mean'
            }).reset_index()
            
            metrics_df['total_revenue'] = metrics_df['transaction_qty'] * metrics_df['unit_price']

            # Create dashboard layout
            fig = make_subplots(
                rows=2, cols=2,
                subplot_titles=(
                    "Price vs Volume Analysis",
                    "Revenue by Category",
                    "Top 10 Products by Revenue",
                    "Sales Volume Distribution"
                ),
                specs=[[{"type": "scatter"}, {"type": "pie"}],
                      [{"type": "bar"}, {"type": "bar"}]]
            )

            # Add traces
            self._add_price_volume_scatter(fig, metrics_df)
            self._add_category_revenue_pie(fig, metrics_df)
            self._add_top_products_bar(fig, metrics_df)
            self._add_volume_distribution(fig, metrics_df)

            # Update layout
            self._update_dashboard_layout(fig)
            
            logger.info("Sales dashboard created successfully")
            return fig

        except Exception as e:
            logger.error(f"Error creating sales dashboard: {str(e)}")
            raise

    def create_seasonal_dashboard(self) -> go.Figure:
        """Create the seasonal analysis dashboard.
        
        Returns:
            go.Figure: Plotly figure object containing the seasonal dashboard
        """
        try:
            # Add season column
            self.df['season'] = pd.cut(
                self.df['transaction_date'].dt.month,
                bins=[0, 2, 5, 8, 11, 12],
                labels=['Winter', 'Spring', 'Summer', 'Fall', 'Winter']
            )

            # Create dashboard
            fig = make_subplots(
                rows=3, cols=2,
                subplot_titles=(
                    "Monthly Revenue Trends",
                    "Revenue by Season",
                    "Top Products by Season",
                    "Category Performance by Season",
                    "Average Price Trends",
                    "Transaction Count by Season"
                ),
                specs=[[{"type": "scatter"}, {"type": "bar"}],
                      [{"type": "bar"}, {"type": "bar"}],
                      [{"type": "scatter"}, {"type": "bar"}]]
            )

            # Add all traces
            self._add_monthly_revenue_trend(fig)
            self._add_seasonal_revenue(fig)
            self._add_seasonal_products(fig)
            self._add_seasonal_categories(fig)
            self._add_price_trends(fig)
            self._add_seasonal_transactions(fig)

            # Update layout
            self._update_seasonal_layout(fig)
            
            logger.info("Seasonal dashboard created successfully")
            return fig

        except Exception as e:
            logger.error(f"Error creating seasonal dashboard: {str(e)}")
            raise

    def generate_insights(self) -> Dict:
        """Generate key business insights from the data.
        
        Returns:
            Dict: Dictionary containing various business insights
        """
        try:
            insights = {
                'top_products': self._get_top_products(),
                'seasonal_patterns': self._analyze_seasonal_patterns(),
                'price_sensitivity': self._analyze_price_sensitivity()
            }
            return insights
        except Exception as e:
            logger.error(f"Error generating insights: {str(e)}")
            raise

    def save_visualizations(self, output_dir: str) -> None:
        """Save all visualizations to HTML files.
        
        Args:
            output_dir (str): Directory to save the visualization files
        """
        try:
            # Create and save sales dashboard
            sales_dashboard = self.create_sales_dashboard()
            sales_dashboard.write_html(f"{output_dir}/sales_dashboard.html")

            # Create and save seasonal dashboard
            seasonal_dashboard = self.create_seasonal_dashboard()
            seasonal_dashboard.write_html(f"{output_dir}/seasonal_dashboard.html")
            
            logger.info(f"Visualizations saved to {output_dir}")
        except Exception as e:
            logger.error(f"Error saving visualizations: {str(e)}")
            raise

    # Helper methods for dashboard components
    def _add_price_volume_scatter(self, fig: go.Figure, df: pd.DataFrame) -> None:
        """Add price vs volume scatter plot to the dashboard."""
        fig.add_trace(
            go.Scatter(
                x=df['transaction_qty'],
                y=df['unit_price'],
                mode='markers',
                marker=dict(
                    size=df['total_revenue']/500,
                    color=df['total_revenue'],
                    colorscale='Viridis',
                    showscale=True
                ),
                text=df['product_detail'],
                hovertemplate="<b>%{text}</b><br>" +
                             "Units: %{x}<br>" +
                             "Price: $%{y:.2f}<br>" +
                             "<extra></extra>"
            ),
            row=1, col=1
        )

    # [Additional helper methods would be implemented here]

    def
